require 'common'
require 'net/ssh/ssh_sig'
require 'ostruct'

class TestSshSig < NetSSHTest
  def setup
    @key_file = File.expand_path("/key-file")
    @namespace = "file"
    @data = "very secret data\n"
  end

  def signature_invalid_beginning
    # one dash at the beginning
    <<~VALID_EMPTY
      -----BEGIN SSH SIGNATURE----
      -----END SSH SIGNATURE-----
    VALID_EMPTY
  end

  def signature_invalid_ending
    # one dash missing at the end
    <<~VALID_EMPTY
      -----BEGIN SSH SIGNATURE-----
      -----END SSH SIGNATURE----
    VALID_EMPTY
  end

  def signature_valid_armor_empty_message
    <<~VALID_EMPTY
      -----BEGIN SSH SIGNATURE-----
      -----END SSH SIGNATURE-----
    VALID_EMPTY
  end

  def rsa_key
    # 512 bits
    @rsa_key ||= OpenSSL::PKey::RSA.new("0\x82\t(\x02\x01\x00\x02\x82\x02\x01\x00\x96y\xD9>L5\xD0\x12Ty\x19\xFD\x03\x87\xFF\xCC\x9Cb\x85*\xA7_\xA3X.\xA0\xB7\n\x02L\xE5\xF1\xA1\xF8\xE5&\xA7x\x97\x11$\f\x12\x1D\tA\x8D\xE3\x1DL\"\x87M\xB8\xB0\t\xC9Y5\xAD\xFE\xEA\xEF\xB1\x0F\x96\r\x0F\x8D\xFB\xF1@\xFE\xF52e\x92\xC4\x02\x8A\x0E\xF4\xC1\xF3\xD2\x8D\xA5!O1\x00\xC0\x86*\xE3\fw=\x7F\x9A@\xEA?\x0F\xB8\xA4\xA0AR\x84\e\xBF\x0E\xAB\xC6\xEB'\xB0~hK\xDE:\xB5H\r\xEE\x00\xC8L\xD6\xD3G\x91\xBF\xAD\xC7\xD0\x81\xAF~HN\x80\x90\x02\xC9&\xA8n\xF6\x90\x85\xCA\x8F\x8C\x1C\t\xC0\x84_\x10\xDEJ\x89>\xCE\xBD\xF2U\x89\xAFC\x9D~\xA3,\xDD\xE1\x9BQ\xC8\x9B<\x83\x14\x1D\eoU]\x91\xC2\x94\x9Af\xC4\xCE\x00\xF5\xBE\xC5\x02\x82\xE1Il\xA0\x92\x12\xC5\x03\xB9k\xA6\xC2\xDAK\xF4\x05\xB3kTs\a\xB9\xE5\x17\x84t\x00\xFA\x86\xEF\x9B08wv\x91\xC1\xB7\xF8V\xDB\f\xB0Z\xAB\xCA\xB1\x96TA!\x84\xEF\bRjq\xFE(me\xCFu\rH\xBAw\xD2\x03\x19\xD4\xCD\xDB\xB3\x84\xFC\xA8Z\x7F\x9B\f\xA3\xB6\xDC><;S3\xEA\xCD\xFAs\xD06\x86\x1A\xCF\xF8\x17&\x92\xCD\x83K\x13\xB7\x86C}\x02\x9Ad\xD3\xA2s\xEFr\x0F\xCB\x8E\xB5|\x00\xC1\xEC\xA4\xCDCJr\x9B\xAF\xC0F\xB4\eo\xE6\x16\xF7\x19\x0E\xD9ca\xDF\x10\xC7\xB0-Cm\xCB\x155|\x91\xCCZ\x1F\x06\xE4_\xBE\xD6\xBD?Z\xEA\x9F\x14\x86\x8EN\x1E\xA9c4BE\x8D\e\x0Ey\xDF\x9A\xCD\xD0\xC9\x81\xF4\x8Bs0c\xDC\x8B\x96\xEE\x88\x10\x14Pt\x885\e\xCAVC$\x126\x1C\xD6\xC7\xDF2\x181\xB7\xAE\xEFD,b\x04\xFF\xC5o\x8B\xE4\x00\xF0\x83\xED\x00f\xC8}\xE7\x90\xD0u\xABI\xE4\x1F\xCA\xEB\xF5k\xD1 c\x86\x0Fa}\xA5\xB3J\xAE\xC0xC\xF3\x14\xFB\xB5\xDD`J\xB5\xAA~\x17Y\xBC\x92v\x99_p\xE1\xC2\xED?Y\xC8j\xBFm\x83\x83@\x92\x9A\x87\xA7\x80\xC4\x0E\xC20\xF3\xD3\x02\x03\x01\x00\x01\x02\x82\x02\x00#6PG\xEB\xBD\x8B\xFB>\x198\xA3\xA4w\xE6\xBC\x12\xBC[='\xFD\x91S\xC9U\x82\x7F\xAD\x1A!\x94\xF1\xBA4\xA5^\xFB1\x1E\xA9\xB8\xC9dR\x0E-\r\xC0\x85Xo!\x18\xDE\xD8\xEBm\x1C\xCA\xA2\xA4\x87\x82\x7F\x8B5s6^\x86\x8E\x17\ey\xB7\x9B(\x93\x0F\x8B\x80k\x02\x8Bz\xE9\xF1i~\xA6\x16gO\x11\xE2\x90\xE4\xAB?\x85\x81KPz|\xCB\xA3}\x93\xBC\x8Ap\xFCq\x88\x05\xB9\x9FZ\xF8\xA6\x00F\xFB\x9D\x86\xDCX\x02\xE3\"}\xD4\xF5m\xCD\x1CU\xBC\xA3hx6M|\xD9eZt\xDC\xED\xE4\xE1\t\xC6W\xA9P\x8B\xA9Sa1?\xFC\x9A\x94\x88h\xCB\xD7_\x933W+\xE0\xA02\xA0h\xB9*\xE7\xE1\x85\x0E.wcv\x00z\x95\xC7\x06\xB6\xCE2\xB3y\x96\xA4\xD9\xE3<\xB06~}\xEB\xE9/\xEF\xCE\x19\x17<\xFB8\x89\x1D1\xED\xD4\xEAo\x1Eg\xA6\xF2\xF90\x88\xB87\xFE|\x98\x8F$e\xD0\xADa\xC2\xC2\xF5\x00q\x9E$\t9\xB6m\xFCu\xD0r\x95u\v\x84%}\x94\xBB}\x84\x89J/lx\x15v\xE4|\x93|\x8A\xAD\x03\xE4\xC19\x9F\x0F\a\n.-\f\x8D.\xC2D\xA6q\xB9\xF0\x00m\x97`\x9Dyv\xF0\xEAd\x9A\x99\x1Fo\xD1O\x15H\xCE\x0E\n\x0Fq\xFDI\x05\xAD\xA6\x8A\xD23\xAA\r\x1E\xE1\f\x85\a\xDB\xB5\xC6\x93\xB2\xE8\x85\xCB\xE0ZVe-\xD2\xEE\xE5\x95go\x04\xEE\x040\xA3u\xE5k\xB9U\xE0\xEB\xB5\x84M\xA0e\xC5\xD4\xA1.Xu\xAB\x11\x87\xA8!\xCAg[l\x94\xDB\b\xDE1\x9EX\x91Vp\x1E\x84\x14\x88+^\xF4\x1C\xDF\x0E\xF4\xA290\x88\x81\x8Cl\xD2\xBF\xFAodW\xFCq&\xFFQ\xD36\xE4\xF6\b;\xF9tV\xAB'\x17O\x06\ewo{DM\x04\xEE1M\xBCC0\x11\xA2\xB3\x81v\x17e\x00\xF1\xED\xBF\xDEN\xA5u;\\O@0\xA9\xE7\xB7\xF3\x93\xBF\xCB\xB4p\x1Cp\xC2(\xDF\xCEr\xBC\xFA\xDC\xDDIRo\x14\x00\xEA]\xB8\xD3\x0ENf\xD5\x01\x02\x82\x01\x01\x00\xC6'\t\xFEV\xCB\"\xF9\xEA\xE0:\xCF\xCC\xC93\xCE\x96.\xB7l6\x8E\a\xFC\xC4x\xB7\xFEs'\xDB\bJ\xF2\xC0H\x88\x89z>duU\x96\b\xFC\xEB^N\xDCpk*\x802\xF9w\xCF\xEF\xDC\xAD.\"\xB7J\xEA\x8A@\xA8oC\xD7\xF3e\xB3\xF3dm\xE9\x93\x9E\xB1\xB9\x0E\x06\xC0>\x7F\xA9q\x8A\x01\xCD\xB5o@\x8E\x911\\x^s\x19\xAB\xFD\x9E_\xF6\n\xF9\x9CsU6\x9E\rQ\xCA\xA3\xA1\xAE\xC9O2\xD9$d\xA3t\x8B\x8B\xAA\xFBW\xC2\xF2\xAB\xE4\xD4\xD7'\xC9\xC2OC\xB1Y\x1ES\xD1N\xAF\xEEkD\x005\x8A\xAA4\xDF)\x03\x80h\xA8\x81\x10\xDC\x86\xF0\xB2\xD4\x82\xB0\xD4\b\xA0\xB0\x12\xBE\x14\xCF\x85\xCA\x10\xB1Y zQS\x96\xCB\xC6\xE3W\xF00\x105\xDA\xAB\x97\x7F\x18{\x91py\e\x8E'U~\xAC\xDF\x80\xD7\xA9\xEFY\xA3\x00R]\xA3\x9A^\xC6\t\xD8\x1E\x03\xDF\xA5\xEF\xEC\x03\x83\x14\xDE\xEF\xDFST`]\x00\x0F\xDB\xDA\xE4Z\x91\x02\x82\x01\x01\x00\xC2g\xB2=9\xF2\xEDe\xB4\x9B\x99\xF3\xE2w\x13\x05\xFB\xEE\x13=\x8Ev\x1Du\x8A\x86\x11*\xD8|p\xE3M\x8C\xF3y\xF4\xD7U*\x93\xD6{L\xE8\x8D\xB6j\x17\xD0\xD5\xBC74ei\x94\xF9]\x17\n\x90H\xBD\xB6\x80v\x95}\xC6\xDF\xF8\xAE\xA1\xFA\xB9\xAC\xAC\xCA/\xD8\xBB\x91'$\x90\xB6`Bi|&o>\x8F\xC04\xC6\xFAZ\xBB \xD4\xC7\xE0\xA7A\xE5\xBB\xE7\x9A\x9CRJ3\xAC\x8B\xF5\xFD\\#f}Y:\x8D32\v\x8Cr\x82\x19\x1F0\xAEs\xB0j\x17\x1D\xB7\x88\x8EV\xA3JVv\xC0g6 \x03^\x02\xBA{\xD5$<c\x05\xBFB\xF9\xDB1\xEC\x84\x9B\x9Fm\xAD\xFED\xAB\x00\a\xED\x8B\x86(}BB.1\\lR\x01\xD3\\U]\x03\xFD\x88\xD4\xF7\x82\xE3\x1EE\xD4\xA1\xCC\x9CU\xAAx\x0E\xB9\xEB\x96e(\x99\xCD\x8C\xB1u\x87\x86\xED\xC9m\xC7\x032D\x9FT\xE1\x12\xD1\x97\x9B\xCF\x19\xC1\xA3\x1C\x85T_\xAF\xED^\xE7\xA0\x84dr#\x02\x82\x01\x00[M\x1F\xA0\xAEs8\xF1x\x94\xCA\xE4v\x92z\xA9\x84\xAF\x8F\xDAo\xA4\xAF\xEFz\xC3\xB8\xDB\xA8I\xC3\xF5\xA5;\x06\xF8$\xD9[\x97&\b\x9E_\xDCRUM\x05\xFF2Y^\xA2\xE5Y\xE7'\xCBx\x9D\xDF5%\xC9\x82\x1A#\xC2\xB8I\xC5V$\x15o_e\xF9\x8B\bC\x11fr\e\xE0pH-\xC5\x8E!/\xA9LP\xA4{\xDF\x04\xA3X[\x8A\xD0\xF8Iu\x00\a\x95[\xDA\xF6\xA8\x8A\xB0\x963!K|\xFC^\f\x89eI\x9Fh\xB0\xF9\x1E\x88\x88\x8D\xF2@%\x05\xE2\x12g\xD2\xC7\xF9\x0E|\x17\xD8\xC8m\xED\xE8D\xD3\xE7\xD7\xB5\xA7X\xEF\xF7\xEA\x11\xCF\x1Aq\x1F{\x99\xAA|\x9A\x9FI\x83\x94.\xAC\xE4\"\x88\xA07\xC3\xCBC\xAA\xE0QZ\xB7\x8F\xBB[\x83hkl\xFC\xB3}\xFE\xF7\x13\xDB\xD3\xDE\xC4\x1E\xBB8J\x7Fl\xBE+\n\xB4\x05R\x02\xF6!\xFD}e\xA2\xA7\x93_\x9E,\xE0\xBE\xFF\xB6z\xC3\xCA9\x12\xC3\x8F\f\xC0\xBD\xF9JU^\x1D{\xD1\x02\x82\x01\x00%]0\xD0\xBB\xB6\x89\x12'(P\xEA\xA2\xF8'\xDB\xDA\x93\xE3v\xCDN\xBER\xBD\x11\x0Fs\xA0\xB0*2E\xD1ujW8\x9B\xD1\xD7 >\n\x86\x17\xD6\x9B\x85\x80I\xD4&\xF8\x17\x15\xB7\xE0E\x98\f\e\xB7\x1F_XIri\xFE3E\xE4\xAA\x959\xE2\x8ACA\xF6\xF1\xF5\xF0\x04\x03\x1CJ[\xF9R7@\xE2QV\xAB\xCE\"\x88\x15\xB75\xAED\xEB`\xAA\xFA\xF6\x84\xAC\xCE\xD4\x1C\"i\xB4\x19\xC1\xFF\xBB\xCF\x13\xBBA09\xCA&pK\xB8\xF0Y\xB6\xED\xDDVF\xA3\e\x87Ot/f6@\x14\xB2\xC1\xA0]\x85P\x18\xEF|\x03\xBE\xE7yOM\\ X\xF4\x10x\xA8\xA7\xB7\xEDJ\xDDb\xE0#3\xD1\xD1.a\xF1\xBEW\x16`kR\x96\x81\x04\x97 \x116\x9FX\x02\xFC\v\xF1w\xF0\xB1\x16\xCB\x10<\x8A\xF8\b\xE3\x9B\x05\xB6\xA9\xDF\x04\xAC\x86#\xD4\xC8\x06%]\xE3\xE7t\x88'\xCA*&mw\xDC\x87o\x06(J\x13*\t\x01X\x9BmV\xB0\xE9\x02\x82\x01\x01\x00\x8B\x8D\x8D\xAAniO\xFB\xDD\xAA;% \xFC\xB2\xD0\x01\xA8i3\x87\xE3|j\xE5\xE9\t\xED\x87\xC14f\xB8\xD9\xEDh\xE5\x0F\x188[_\x9D\x9E\x18\xC1r+>/[\xEE`(\x9E\x8F\xE2\xB4\xA7y\x04e\x1C\xD4\x80\xCD,\xEB\xB6rjJ\xED\t\xA1+\xC1T\xE4Nxt\x8E\xD3! \xB4\xDB1}\xC4\x9C\xD4#\xF6\xB9\x99\x8FQ\xA4\xF4\nVx\xE5\xDA\x00\xA3\t \xAF\x04\x81\x9A]\xA4qv\x85\x97 \xCC\x88.n\xC8j\x86\x81$\xC2;YlJS\f\xB8e\x99F\xCA\xE0T[\xD4h\xD2\x81\\\xA1zE\xD3\xE4\xEF\xB0x\x18\xAE\xE0S\"\xF1\x874\x16W\x80\a\xC7\xF0\xD6\xD9'\xD6_C\xF4\x85\xA2\xA2\x98\xF2\xBA\xE3O\x88\xA2\xC9\x13\n\xCF<\xF2vL\xDC\x97\x87\xA0\x8F\xA9z\xB8\xF8ECy\xBD\v\xAE\xD1\xD6\x1F\xEA\x052<\xE2\xE0\xD0\x84\x84T\xAE\x17\xA1KA\xAD=$^\xDBW\xA1\x8A\x0Fp\xE3P\xE2\x9B\x16!S\x13\xF6\x19\xEF\xCA8%g\b".force_encoding('BINARY'))
  end

  def rsa_signature
    # tied to rsa_key & namespace="namespace" & data="very secret data\n"
    "SSHSIG\x00\x00\x00\x01\x00\x00\x02\x17\x00\x00\x00\assh-rsa\x00\x00\x00\x03\x01\x00\x01\x00\x00\x02\x01\x00\x96y\xD9>L5\xD0\x12Ty\x19\xFD\x03\x87\xFF\xCC\x9Cb\x85*\xA7_\xA3X.\xA0\xB7\n\x02L\xE5\xF1\xA1\xF8\xE5&\xA7x\x97\x11$\f\x12\x1D\tA\x8D\xE3\x1DL\"\x87M\xB8\xB0\t\xC9Y5\xAD\xFE\xEA\xEF\xB1\x0F\x96\r\x0F\x8D\xFB\xF1@\xFE\xF52e\x92\xC4\x02\x8A\x0E\xF4\xC1\xF3\xD2\x8D\xA5!O1\x00\xC0\x86*\xE3\fw=\x7F\x9A@\xEA?\x0F\xB8\xA4\xA0AR\x84\e\xBF\x0E\xAB\xC6\xEB'\xB0~hK\xDE:\xB5H\r\xEE\x00\xC8L\xD6\xD3G\x91\xBF\xAD\xC7\xD0\x81\xAF~HN\x80\x90\x02\xC9&\xA8n\xF6\x90\x85\xCA\x8F\x8C\x1C\t\xC0\x84_\x10\xDEJ\x89>\xCE\xBD\xF2U\x89\xAFC\x9D~\xA3,\xDD\xE1\x9BQ\xC8\x9B<\x83\x14\x1D\eoU]\x91\xC2\x94\x9Af\xC4\xCE\x00\xF5\xBE\xC5\x02\x82\xE1Il\xA0\x92\x12\xC5\x03\xB9k\xA6\xC2\xDAK\xF4\x05\xB3kTs\a\xB9\xE5\x17\x84t\x00\xFA\x86\xEF\x9B08wv\x91\xC1\xB7\xF8V\xDB\f\xB0Z\xAB\xCA\xB1\x96TA!\x84\xEF\bRjq\xFE(me\xCFu\rH\xBAw\xD2\x03\x19\xD4\xCD\xDB\xB3\x84\xFC\xA8Z\x7F\x9B\f\xA3\xB6\xDC><;S3\xEA\xCD\xFAs\xD06\x86\x1A\xCF\xF8\x17&\x92\xCD\x83K\x13\xB7\x86C}\x02\x9Ad\xD3\xA2s\xEFr\x0F\xCB\x8E\xB5|\x00\xC1\xEC\xA4\xCDCJr\x9B\xAF\xC0F\xB4\eo\xE6\x16\xF7\x19\x0E\xD9ca\xDF\x10\xC7\xB0-Cm\xCB\x155|\x91\xCCZ\x1F\x06\xE4_\xBE\xD6\xBD?Z\xEA\x9F\x14\x86\x8EN\x1E\xA9c4BE\x8D\e\x0Ey\xDF\x9A\xCD\xD0\xC9\x81\xF4\x8Bs0c\xDC\x8B\x96\xEE\x88\x10\x14Pt\x885\e\xCAVC$\x126\x1C\xD6\xC7\xDF2\x181\xB7\xAE\xEFD,b\x04\xFF\xC5o\x8B\xE4\x00\xF0\x83\xED\x00f\xC8}\xE7\x90\xD0u\xABI\xE4\x1F\xCA\xEB\xF5k\xD1 c\x86\x0Fa}\xA5\xB3J\xAE\xC0xC\xF3\x14\xFB\xB5\xDD`J\xB5\xAA~\x17Y\xBC\x92v\x99_p\xE1\xC2\xED?Y\xC8j\xBFm\x83\x83@\x92\x9A\x87\xA7\x80\xC4\x0E\xC20\xF3\xD3\x00\x00\x00\x04file\x00\x00\x00\x00\x00\x00\x00\x06sha512\x00\x00\x02\x14\x00\x00\x00\frsa-sha2-512\x00\x00\x02\x00o{\x95\xE7\xC7\x19\xF9ovR\xEB\xA8\xEC\xF1K@V\xC7\x93\xAE\xADN<\x92\x1D^CR\xB1O\x10\x8Dk$\xF3\xEB&\xD1\xE0d\x99\xB8\xAB\xEE\xB2\xD5\x17\xC6\x8A\xCD1\ez\xC1\t\x84J\xF6\xB9\x90D\x90\x984\xC3\xF6m\xE8f\n\xC6\xFA\xB6\x91\xA5\xA4Q\x86\xEF\xCE\x05x\xF6\xC8\aq\xFE_\xC4!f.c\x8C\xB5#\x83\xC9\xB2q\xBAV\xE1\xCC\xDB\x1E'f\xA0\x84\xEA~7\xBD\xD8\xDF\xDDU\bg\xE1 \"\xEE\xF1\x19\x86\xE7\xEE|\xE0\xB0\xF5/\x1D\x9F\x84\x9E\xC1\x90M\t\xB3\tH\x8C\xFC\x13\x8F\xEC\xBF'f\x0E|\x01\xE2\xD3\xD9\xDBF\xB9\xAC\xA1\xB4\xB7\xF0\xD8\xDC\xCD:-\x9A\xC4\xA2\xAB\x9Ad\x8Bb\xDF\x1E`\xAC9\x8Ax\xE3\xFC\xBA\xFE\xD3\x8C\xCD)\x14f\x02\xA2\x0F\xA2\b\x9F\xF2)\x19!z,\x91\x8EYk\x81bZ\xED\e\xC4\xE7\x7F\x82h#\xB0Ns\x83~\x96\x92Y\r\xE6\xCE\x02S\xD3\xD4{\xB3j\x14\xC3pv\x12\xA5\x90\x80\x12\x12\x86a\x97\xF6\x96V\xA5\xC3H\xBCr\b\xB3\xF4g\xF7\xF1H\xEA\x19\xC5\xF1\x17oe\xB5e0\xB6e\xFD`(*\\R\xDD\xA6\xC8\x82\x93\xA1\xA5\xB5\xC9\x8F\v\x18\x15\xF5X\xD0\x1A,\xFF\x12\x7F\xE4\x16\xE5~a\x9D\x12\xB5i\x04-\xD5\x9E6\xB9\xC0\xAA\x9A\xC2\x86\xCE\xBA,\xD8\xFE\x17\x7F\xE2P\xBA8Pv!\x8CfTl\xB4\xE2\x92\x86g\xA2e\xDB\xF3\xE3\xC3\xC4\xEDm\xB2\xB6*o\xD1\xCF\xD1az\xF3\xC2:\xCCv\xFE\xCF2\xCF\xFA\xCF\x94Hw\x1C\x14{\xCF\xC1\xC9\xFA\e\xF7*WZ\xA6m\x11\xF2S?\"X\xCB=RLS?\x18\xDA\x8B\xEAdr\xB2\xB2%\xD5iW\xE7\xBF\xF6f:A\"\xB1\x80\xD3\xFC\xD8\xB6\x96\xAE\v\x86\xFE\xBB\xCD\xE1\xF6\x00\xD1\x9C<\x8D\xDE\x98\x1C\"%m\xD1\x1F\x06\xAF\fG\xAEb\x90\x90~D\xE4\xC30\xC9\x04X\xDB:\x12\x18\xDC\xB1\xC8\eRq\xC0\xB2Q\xE0\xED\x86\xA41\xEC\xC6Ft\x19\xBAC_wJ\xE7\xCA\xCF\xE2|\xA86R%\xF7\xC4".force_encoding('BINARY')
  end

  def test_accept_rsa_key
    assert_nothing_raised do
      Net::SSH::SshSig.new(rsa_key)
    end
  end

  def test_sign_requires_pkey_to_sign
    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureMissingPrivateKey) do
      signer.sign(@namespace, @data)
    end
  end

  def test_verify_signature_armor_beginning
    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureBadArmorFormat) do
      signer.verify(signature_invalid_beginning, @namespace, @data, from_armor: true)
    end
  end

  def test_verify_signature_armor_ending
    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureBadArmorFormat) do
      signer.verify(signature_invalid_ending, @namespace, @data, from_armor: true)
    end
  end

  def test_verify_signature_armor_empty_message
    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureInvalidFormat) do
      signer.verify(signature_valid_armor_empty_message, @namespace, @data, from_armor: true)
    end
  end

  def test_verify_bad_sig_preamble
    buffer = Net::SSH::Buffer.from(
      :raw, 'SSHZIG'
    )

    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureInvalidFormat) do
      signer.verify(buffer.to_s, @namespace, @data)
    end
  end

  def test_verify_bad_sig_version
    buffer = Net::SSH::Buffer.from(
      :raw, 'SSHSIG',
      :long, 2
    )

    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureUnsupportedVersion) do
      signer.verify(buffer.to_s, @namespace, @data)
    end
  end

  def test_verify_signer_not_allowed
    buffer = Net::SSH::Buffer.from(
      :raw, 'SSHSIG',
      :long, 1
    )

    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureSignerNotAllowed) do
      signer.verify(buffer.to_s, @namespace, @data, allowed_signers: ['known public key blob here'])
    end
  end

  def test_verify_signature_namespace_mismatches
    buffer = Net::SSH::Buffer.from(
      :raw, 'SSHSIG',
      :long, 1,
      :string, rsa_key.public_key.to_blob,
      :string, 'unknown namespace'
    )

    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureNamespaceMismatch) do
      signer.verify(buffer.to_s, @namespace, @data)
    end
  end

  def test_verify_signature_hash_mismatches
    buffer = Net::SSH::Buffer.from(
      :raw, 'SSHSIG',
      :long, 1,
      :string, rsa_key.public_key.to_blob,
      :string, @namespace,
      :string, 'random-algo'
    )

    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureHashAlgoritmMismatch) do
      signer.verify(buffer.to_s, @namespace, @data)
    end
  end

  def test_verify_signature_has_trailing_data
    buffer = Net::SSH::Buffer.from(
      :raw, 'SSHSIG',
      :long, 1,
      :string, rsa_key.public_key.to_blob,
      :string, @namespace,
      :long, 0,
      :string, 'sha512',
      :string, 'signature blob',
      :string, 'trailing data'
    )

    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureTrailingData) do
      signer.verify(buffer.to_s, @namespace, @data)
    end
  end

  def test_verify_signature_sign_algo_mismatches
    buffer = Net::SSH::Buffer.from(
      :raw, 'SSHSIG',
      :long, 1,
      :string, rsa_key.public_key.to_blob,
      :string, @namespace,
      :long, 0,
      :string, 'sha512',
      :string, 'signature blob'
    )

    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureSignAlgoritmMismatch) do
      signer.verify(buffer.to_s, @namespace, @data)
    end
  end

  def test_verify_signature_valid_msg_empty_sig
    buffer = Net::SSH::Buffer.from(
      :raw, 'SSHSIG',
      :long, 1,
      :string, rsa_key.public_key.to_blob,
      :string, @namespace,
      :long, 0,
      :string, 'sha512',
      :string, Net::SSH::Buffer.from(:string, "rsa-sha2-512", :string, '') # empty signature
    )

    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureInvalid) do
      signer.verify(buffer.to_s, @namespace, @data)
    end
  end

  def test_verify_signature_valid_msg_bad_sig
    buffer = Net::SSH::Buffer.from(
      :raw, 'SSHSIG',
      :long, 1,
      :string, rsa_key.public_key.to_blob,
      :string, @namespace,
      :long, 0,
      :string, 'sha512',
      :string, Net::SSH::Buffer.from(:string, "rsa-sha2-512", :string, 'bad signature') # empty signature
    )

    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_raises(Net::SSH::SignatureInvalid) do
      signer.verify(buffer.to_s, @namespace, @data)
    end
  end

  def test_verify_signature_valid_from_armor
    signer = Net::SSH::SshSig.new(rsa_key.public_key)
    armored_signature = [
      '-----BEGIN SSH SIGNATURE-----',
      Base64.encode64(rsa_signature),
      '-----END SSH SIGNATURE-----'
    ].join("\n")

    assert_nothing_raised do
      assert_equal signer.verify(armored_signature, @namespace, @data, from_armor: true), true
    end
  end

  def test_verify_signature_valid
    signer = Net::SSH::SshSig.new(rsa_key.public_key)

    assert_nothing_raised do
      assert_equal signer.verify(rsa_signature, @namespace, @data), true
    end
  end

  def test_sign_rsa
    signer = Net::SSH::SshSig.new(rsa_key)

    generated_signature = signer.sign(@namespace, @data)

    assert_equal rsa_signature, generated_signature
  end
end
